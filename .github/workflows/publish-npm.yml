# Workflow assumes:
# - Repository variables and secrets:
#   - secrets.NPM_AUTH_TOKEN
#   - Note: would prefer to put these in an environment requiring approval, but this then requires
#     each individual job to be approved which is too annoying.  See:
#     https://github.com/orgs/community/discussions/14417#discussioncomment-2904984

name: Publish to NPM

run-name: Publish ${{ inputs.releaseTag }}${{ inputs.dryRun && ' (dry run)' || '' }}

permissions:
  contents: write
  pull-requests: write

on:
  # Only runs on demand
  workflow_dispatch:
    inputs:
      releaseTag:
        description: "Release Tag (vx.x.x)"
        required: true
        type: string
      dryRun:
        description: "Dry run"
        required: true
        type: boolean
        default: true

jobs:
  compute_dist_tags:
    name: Compute dist tags
    runs-on: ubuntu-latest
    outputs:
      computedDistTags: ${{ steps.compute_dist_tags.outputs.result }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.releaseTag }}
      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: pnpm setup
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Install dependencies
        run: |
          pnpm i
      # We don't need to run CI prior to computing dist tags, we'll do that in the publish step
      - name: Compute dist tags
        id: compute_dist_tags
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const releaseTag = "${{ inputs.releaseTag }}";
            // Note the tag name includes a leading "v"
            const matchResult = releaseTag.match(/^v(\d+)\.(\d+)\.(\d+)$/);

            if (matchResult === null) {
                throw new Error("Expected a tag name in the format v1.2.3");
            }
            const majorVersion = matchResult[1];
            // TODO: Verify this is actually the latest for its respective major line, probably error otherwise?

            console.log("Performing dry-run publish to determine list of packages that will be published");
            await exec.exec("pnpm publish", ["-r", "--no-git-checks", "--dry-run", "--report-summary"]);
            const packagesToPublish = JSON.parse(fs.readFileSync("pnpm-publish-summary.json", "utf8")).publishedPackages;
            console.log("Packages to publish:");
            console.log(packagesToPublish);
            // Then clean up the file, or else pnpm won't want to publish
            fs.rmSync("pnpm-publish-summary.json");

            // for each package, compare to latest tag - if newer, also get "latest" otherwise just latest-major
            console.log("Annotating packages for latest...");
            for (const packageToPublish of packagesToPublish) {
                const latestPackageVersion = await fetch(`https://registry.npmjs.org/${ packageToPublish.name }/latest`).then((res) => res.json()).then((parsedRes) => parsedRes.version);
                if (latestPackageVersion === undefined) {
                    // Just stashing the latest flag on the package object itself
                    packageToPublish.latest = true;
                    continue;
                }
                const latestPackageVersionParsed = latestPackageVersion.match(/^(\d+)\.(\d+)\.(\d+)$/);
                const latestPackageVersionInfo = {
                    major: latestPackageVersionParsed[1],
                    minor: latestPackageVersionParsed[2],
                    patch: latestPackageVersionParsed[3],
                };
                const packageToPublishVersionParsed = packageToPublish.version.match(/^(\d+)\.(\d+)\.(\d+)$/);
                const packageToPublishVersionInfo = {
                    major: packageToPublishVersionParsed[1],
                    minor: packageToPublishVersionParsed[2],
                    patch: packageToPublishVersionParsed[3],
                };
                if (
                    packageToPublishVersionInfo.major > latestPackageVersionInfo.major
                    || packageToPublishVersionInfo.major === latestPackageVersionInfo.major && packageToPublishVersionInfo.minor > latestPackageVersionInfo.minor
                    || packageToPublishVersionInfo.major === latestPackageVersionInfo.major && packageToPublishVersionInfo.minor === latestPackageVersionInfo.minor && packageToPublishVersionInfo.patch > latestPackageVersionInfo.patch
                ) {
                    // Just stashing the latest flag on the package object itself
                    packageToPublish.latest = true;
                }
            }
            console.log("Finished annotating packages for latest:");
            console.log(packagesToPublish);

            const versionedLatestTag = `latest-${ majorVersion }`;
            console.log(`Versioned latest tag: ${ versionedLatestTag }`);
            return { versionedLatestTag, packagesToPublish };

  publish:
    name: Publish to NPM${{ inputs.dryRun && ' (dry run)' || '' }}
    runs-on: ubuntu-latest
    needs: [compute_dist_tags]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.releaseTag }}
      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"
      - name: pnpm setup
        uses: pnpm/action-setup@v3
        with:
          version: 9
      # We need to install and run CI to generate the content that will go into the package.
      # Doesn't hurt to have an extra layer of validation before publishing too.
      - name: Install dependencies
        run: |
          pnpm i
      - name: Run CI checks
        # Note that we must use the run verb, as pnpm ci is reserved.
        run: |
          pnpm run ci
      - name: Publish to NPM${{ inputs.dryRun && ' (dry run)' || '' }}
        id: publish_to_npm
        uses: actions/github-script@v7
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        with:
          script: |
            const { versionedLatestTag } = ${{ needs.compute_dist_tags.outputs.computedDistTags }}
            const dryRun = ${{ inputs.dryRun }};

            // Actually do the publish.  Use tag latest-<major> for all packages.
            console.log(`Starting publish${ dryRun ? " (dry run)" : "" }...`);
            console.log(`Will tag using ${ versionedLatestTag }`);
            if (dryRun) {
                await exec.exec("pnpm publish", ["-r", "--no-git-checks", "--tag", versionedLatestTag, "--access=public", "--dry-run"]);
            } else {
                await exec.exec("pnpm publish", ["-r", "--no-git-checks", "--tag", versionedLatestTag, "--access=public"]);
            }
      - name: Add latest tags${{ inputs.dryRun && ' (dry run)' || '' }}
        id: add_latest_tags
        uses: actions/github-script@v7
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        with:
          script: |
            const { packagesToPublish } = ${{ needs.compute_dist_tags.outputs.computedDistTags }}
            const dryRun = ${{ inputs.dryRun }};

            const newLatestPackages = packagesToPublish
                .filter((package) => package.latest)
                .map((package) => `${ package.name }@${ package.version }`);

            console.log("New latest packages:");
            for (const package of newLatestPackages) {
                console.log(package);
            }

            if (dryRun) {
                console.log("Dry run, skipping tagging");
            } else {
                console.log("Adding latest tags...")
                for (const newLatestPackage of newLatestPackages) {
                    await exec.exec("pnpm dist-tag add", [newLatestPackage, "--tag", "latest"]);
                }
            }

  update_github_release:
    name: Update Github release${{ inputs.dryRun && ' (dry run)' || '' }}
    runs-on: ubuntu-latest
    needs: [publish]

    steps:
      - name: Update Github release
        id: update_github_release
        uses: actions/github-script@v7
        with:
          script: |
            const dryRun = ${{ inputs.dryRun }} === true;
            const releaseTagString = "${{ inputs.releaseTag }}";
            // Trim "v" from the front for the version (as string)
            const releaseVersionString = releaseTagString.substring(1);
            console.log(`Getting Github release for ${ releaseTagString }...`);
            const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: releaseTagString,
            });
            console.log(release);
            // Do trimming because editing using the website UI uses \r\n
            const releaseBodyAsLines = release.body.trim().split("\n");
            const packageEntryRegex = /^\* (.*): \(\[changelog\]\(.*\)\)$/;
            let updatedBody = "";
            console.log("Updating release body...");
            for (const line of releaseBodyAsLines) {
                const trimmedLine = line.trim();
                const packageEntryMatch = trimmedLine.match(packageEntryRegex);
                if (packageEntryMatch === null) {
                    updatedBody += `${ trimmedLine }\n`;
                } else {
                    const packageName = packageEntryMatch[1];
                    updatedBody += `${ trimmedLine } ([npm](https://www.npmjs.com/package/${ packageName }/v/${ releaseVersionString }))\n`;
                }
            }
            console.log(updatedBody);
            if (dryRun) {
                console.log("Not updating release due to dry run.");
            } else {
                console.log("Updating release...");
                await github.rest.repos.updateRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.id,
                    body: updatedBody,
                });
            }
